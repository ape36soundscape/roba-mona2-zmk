name: Build ZMK Firmware (Full Safe Build)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Python準備
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # 3) west 等インストール
      - name: Install west and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install west docopt pyyaml colorama packaging ruamel.yaml click

      # 4) ZMKワークスペース初期化（公式 zmk-config のマニフェストを使用）
      #    ※ west init に任せるので git clone は使いません（128エラー回避）
      - name: Initialize ZMK workspace
        run: |
          set -euo pipefail
          rm -rf zmk-workspace || true
          west init -m https://github.com/zmkfirmware/zmk-config.git zmk-workspace
          cd zmk-workspace
          west update
          west zephyr-export
          # 環境変数を書き出し
          echo "ZEPHYR_BASE=$(pwd)/zephyr" >> $GITHUB_ENV
          echo "ZMK_APP=$(pwd)/zmk/app" >> $GITHUB_ENV

      # 5) 使用ボード検出（XIAO BLEを既定）
      - name: Detect XIAO BLE board name (auto)
        run: |
          echo "BOARD_NAME=seeeduino_xiao_ble" >> $GITHUB_ENV
          echo "Detected BOARD_NAME=seeeduino_xiao_ble"

      # 6) ZMK_CONFIG とユーザーシールドの場所を自動解決
      #    - config/ があれば優先。なければリポジトリ直下を使います
      - name: Resolve ZMK_CONFIG and shields path
        run: |
          set -euo pipefail
          if [ -d "${GITHUB_WORKSPACE}/config" ]; then
            ZMK_CONFIG_PATH="${GITHUB_WORKSPACE}/config"
          else
            ZMK_CONFIG_PATH="${GITHUB_WORKSPACE}"
          fi
          echo "ZMK_CONFIG=${ZMK_CONFIG_PATH}" >> $GITHUB_ENV

          if [ -d "${ZMK_CONFIG_PATH}/boards/shields" ]; then
            echo "USER_SHIELD_DIR=${ZMK_CONFIG_PATH}/boards/shields" >> $GITHUB_ENV
          fi

          echo "Using ZMK_CONFIG=${ZMK_CONFIG_PATH}"
          if [ -n "${USER_SHIELD_DIR:-}" ]; then
            echo "Using USER_SHIELD_DIR=${USER_SHIELD_DIR}"
          else
            echo "No user shields dir found (optional)"
          fi

      # 7) 事前表示（バージョンなど）
      - name: Preflight check
        run: |
          cmake --version
          west --version
          python --version
          echo "ZEPHYR_BASE=$ZEPHYR_BASE"
          echo "ZMK_APP=$ZMK_APP"
          echo "BOARD_NAME=$BOARD_NAME"
          echo "ZMK_CONFIG=$ZMK_CONFIG"
          [ -n "${USER_SHIELD_DIR:-}" ] && echo "USER_SHIELD_DIR=$USER_SHIELD_DIR"

      # 8) 左手ビルド
      - name: Build Left Firmware
        working-directory: zmk-workspace
        run: |
          set -euo pipefail
          EXTRA_OPTS=""
          [ -n "${USER_SHIELD_DIR:-}" ] && EXTRA_OPTS="-DUSER_SHIELD_DIR=${USER_SHIELD_DIR}"
          west build -p always -b "${BOARD_NAME}" -d build/left "$ZMK_APP" \
            -DSHIELD=roba_compat_mona_left \
            -DZMK_CONFIG="${ZMK_CONFIG}" \
            ${EXTRA_OPTS} \
            -DZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb \
            -DGNUARMEMB_TOOLCHAIN_PATH=/usr

      # 9) 右手ビルド
      - name: Build Right Firmware
        working-directory: zmk-workspace
        run: |
          set -euo pipefail
          EXTRA_OPTS=""
          [ -n "${USER_SHIELD_DIR:-}" ] && EXTRA_OPTS="-DUSER_SHIELD_DIR=${USER_SHIELD_DIR}"
          west build -p always -b "${BOARD_NAME}" -d build/right "$ZMK_APP" \
            -DSHIELD=roba_compat_mona_right \
            -DZMK_CONFIG="${ZMK_CONFIG}" \
            ${EXTRA_OPTS} \
            -DZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb \
            -DGNUARMEMB_TOOLCHAIN_PATH=/usr

      # 10) 生成UF2のアップロード
      - name: Upload UF2 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zmk-uf2
          path: |
            zmk-workspace/build/left/zephyr/*.uf2
            zmk-workspace/build/right/zephyr/*.uf2
