name: Build ZMK Firmware

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build ZMK Firmware

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (west / Zephyr / GNU ARM)
        run: |
          sudo apt update
          sudo apt install -y \
            python3-pip ninja-build gperf dfu-util device-tree-compiler wget \
            python3-dev python3-setuptools python3-wheel xz-utils file \
            libncurses-dev libffi-dev libssl-dev ccache git cmake \
            gcc-arm-none-eabi libnewlib-arm-none-eabi
          pip3 install west

      - name: Prepare west workspace (local manifest)
        run: |
          rm -rf .west zephyr modules zmk build
          west init -l .
          west update
          west list

      - name: Resolve ZMK and Zephyr paths
        run: |
          set -e
          # west から絶対パスを取得（見つからなければ空文字）
          ZMK_DIR="$(west list -f '{abspath}' zmk || true)"
          ZEPHYR_DIR="$(west list -f '{abspath}' zephyr || true)"

          # 既定の場所にフォールバック
          ZMK_DIR="${ZMK_DIR:-${GITHUB_WORKSPACE}/zmk}"
          ZEPHYR_DIR="${ZEPHYR_DIR:-${GITHUB_WORKSPACE}/zephyr}"

          echo "west list (for reference):"
          west list || true
          echo "Resolved ZMK_DIR=${ZMK_DIR}"
          echo "Resolved ZEPHYR_DIR=${ZEPHYR_DIR}"

          # zmk/app が無ければ強制 clone（確実に用意する）
          if [ ! -d "${ZMK_DIR}/app" ]; then
            echo "zmk/app not found. Cloning zmk..."
            rm -rf "${ZMK_DIR}"
            git clone --depth 1 https://github.com/zmkfirmware/zmk.git "${ZMK_DIR}"
          fi

          # 後続ステップへ環境変数として渡す（ここで失敗させない）
          echo "ZMK_APP=${ZMK_DIR}/app"    >> $GITHUB_ENV
          echo "ZEPHYR_BASE=${ZEPHYR_DIR}" >> $GITHUB_ENV
          echo "Resolved ZMK_APP=${ZMK_DIR}/app"
          echo "Resolved ZEPHYR_BASE=${ZEPHYR_DIR}"

          # あると便利：エクスポート（失敗しても無視）
          west zephyr-export || true

      - name: Build Left Firmware
        run: |
          west build -p always -b seeeduino_xiao_nrf52840 -d build/left "$ZMK_APP" -- \
            -DSHIELD=roba_compat_mona_left \
            -DZMK_CONFIG="${{ github.workspace }}/config" \
            -DZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb \
            -DGNUEARMEMB_TOOLCHAIN_PATH=/usr \
            -DZEPHYR_BASE="${ZEPHYR_BASE}"

      - name: Build Right Firmware
        run: |
          west build -p always -b seeeduino_xiao_nrf52840 -d build/right "$ZMK_APP" -- \
            -DSHIELD=roba_compat_mona_right \
            -DZMK_CONFIG="${{ github.workspace }}/config" \
            -DZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb \
            -DGNUEARMEMB_TOOLCHAIN_PATH=/usr \
            -DZEPHYR_BASE="${ZEPHYR_BASE}"

      - name: Upload UF2 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zmk-uf2
          path: |
            build/left/zephyr/zmk.uf2
            build/right/zephyr/zmk.uf2
