name: Build ZMK Firmware (Full Safe Build)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install west and dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install --user west pykwalify pyyaml

      # --- ZMK west ワークスペースを毎回クリーンに作り直す ---
      - name: Initialize ZMK workspace
        run: |
          set -e
          # 前回の失敗で残った .west / クローンを掃除
          rm -rf app
          # ZMK をマニフェストにして west 初期化
          west init -m https://github.com/zmkfirmware/zmk.git app
          cd app
          # 取得（失敗時は .west を消して再試行）
          west update --narrow || (rm -rf .west && west init -m https://github.com/zmkfirmware/zmk.git . && west update --narrow)
          west zephyr-export
          # あれば依存を入れる（無ければスキップ）
          pip3 install --user -r zephyr/scripts/requirements.txt || true
          # 環境変数を後続ステップへ
          echo "ZEPHYR_BASE=$(pwd)/zephyr" >> $GITHUB_ENV
          echo "ZMK_APP=$(west list zmk -f '{path}')/app" >> $GITHUB_ENV

      # Xiao BLE のボード名を自動検出（見つからなければ既定値）
      - name: Detect XIAO BLE board name (auto)
        run: |
          set -e
          west boards | awk '{print $1}' > boards.txt || true
          FOUND=""
          for B in seeeduino_xiao_ble xiao_ble seeed_xiao_ble seeeduino_xiao_nrf52840; do
            if grep -Fx "$B" boards.txt >/dev/null 2>&1; then FOUND="$B"; break; fi
          done
          rm -f boards.txt
          [ -n "$FOUND" ] || FOUND="seeeduino_xiao_ble"
          echo "Detected BOARD_NAME=$FOUND"
          echo "BOARD_NAME=$FOUND" >> $GITHUB_ENV

      # --- ここが本体のビルド。SHIELD_ROOT でリポジトリ直下の boards/shields を見せる ---
      - name: Build Left Firmware
        run: |
          set -e
          cd app
          west build -p always -b "${BOARD_NAME}" -d build/left "$ZMK_APP" \
            -DSHIELD=roba_compat_mona_left \
            -DZMK_CONFIG="${{ github.workspace }}/config" \
            -DSHIELD_ROOT="${{ github.workspace }}" \
            -DZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb \
            -DGNUARMEMB_TOOLCHAIN_PATH=/usr
          cd ..

      - name: Build Right Firmware
        run: |
          set -e
          cd app
          west build -p always -b "${BOARD_NAME}" -d build/right "$ZMK_APP" \
            -DSHIELD=roba_compat_mona_right \
            -DZMK_CONFIG="${{ github.workspace }}/config" \
            -DSHIELD_ROOT="${{ github.workspace }}" \
            -DZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb \
            -DGNUARMEMB_TOOLCHAIN_PATH=/usr
          cd ..

      - name: Upload UF2 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zmk-uf2
          path: |
            app/build/left/zephyr/zmk.uf2
            app/build/right/zephyr/zmk.uf2
